# server ip address (don't change) and port number (do change)
# also include your apps cluster name here (myapp)

upstream myapp {
  server 127.0.0.1:8000;
  # server 127.0.0.1:8001; <- example for 2 mongrels running on port 8000 and 8001
}

# the server directive is nginx's virtual host directive.
server {
  # port to listen on. Can also be set to an IP:PORT.
  listen 80;
  
  # Set the max size for file uploads to 50Mb
  client_max_body_size 50M;

  # sets the domain[s] that this vhost server requests for
  server_name mysite.com;

  # doc root
  root /var/www/apps/myapp/public;

  # vhost specific access log
  access_log  /var/www/apps/myapp/log/nginx.vhost.access.log  main;

  # NOTE Uncomment and edit to redirect all subdomains back to domain.com
  #      Useful for sending .net and .org variants back to your site.
  # if ($host !~ ^domain\.com$) {
  #   rewrite ^.+ http://domain.com$uri permanent;
  #   break;
  # }

  # this rewrites all the requests to the maintenance.html
  # page if it exists in the doc root. This is for capistrano's
  # disable web task
  if (-f $document_root/system/maintenance.html) {
    rewrite  ^(.*)$  /system/maintenance.html last;
    break;
  }

  location / {
    # Uncomment to allow server side includes so nginx can 
    # post-process Rails content
    ## ssi on;

    # needed to forward user's IP address to rails
    proxy_set_header  X-Real-IP  $remote_addr;

    # needed for HTTPS
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect false;
    proxy_max_temp_file_size 0;
    
    # If the file exists as a static file serve it directly without
    # running all the other rewite tests on it
    if (-f $request_filename) { 
      break; 
    }

    # check for index.html for directory index
    # if its there on the filesystem then rewite 
    # the url to add /index.html to the end of it
    # and then break to send it to the next config rules.
    if (-f $request_filename/index.html) {
      rewrite (.*) $1/index.html break;
    }

    # this is the meat of the rails page caching config
    # it adds .html to the end of the url and then checks
    # the filesystem for that file. If it exists, then we
    # rewite the url to have explicit .html on the end 
    # and then send it on its way to the next config rule.
    # if there is no file on the fs then it sets all the 
    # necessary headers and proxies to our upstream mongrels
    if (-f $request_filename.html) {
      rewrite (.*) $1.html break;
    }

    if (!-f $request_filename) {
      # Use other cluster name here if you are running multiple
      # virtual hosts.
      proxy_pass http://myapp;
      break;
    }
  }

  error_page   500 502 503 504  /500.html;
  location = /500.html {
    root   /var/www/apps/myapp/public;
  }

  location ~* ^.+\.(jpg|jpeg|gif|js|png)$ {
    root   /var/www/apps/myapp/public;
    access_log   off;
    expires      30d;
  }
}
